{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Just Good (JG) Music","text":""},{"location":"#what-is-jgmusic","title":"What is JGMusic","text":"<p>Just Good Music (JGMusic) is a general purpose advanced, multi-featured Discord music bot. It implements features that many free and open source Discord music bots have but not all existent in a single Discord bot.</p> <p>To get started, see Setup.</p>"},{"location":"#features","title":"Features","text":"<p>Below are some features that makes JGMusic different than other free Discord music bots. Some features even take inspiration from VLC Media Player:</p> <ul> <li> Forward and reverse seeking, implemented from scratch</li> <li> Sleep timer to disconnect after a period of time</li> <li> Autoshuffler</li> <li> Jumping to timestamps in songs</li> <li> Effects like playback speed and pitch changing</li> <li> Filters like daycore and nightcore</li> <li> Basic storage of playlists</li> <li> Documentation catered towards basic users and developers</li> </ul> <p>And much more!</p>"},{"location":"#history","title":"History","text":"<p>Just Good Music, originally named JoshGone Music, was created as a joke. After getting tired of a friend's Discord bot (with music playing features) constantly going offline when he stopped hosting it, I forked his repo to host my own copy locally to listen to music whenever I had Discord open. One may argue I could just open up Spotify or YouTube music, but once I got used to the commands, playing music like this became very fast and my goto method? I also had the freedom to create whatever music playing features I wanted. The fork already gave me a good template to work with. One thing led to another, features started piling on top of one another, and here we are.</p>"},{"location":"#design-philosophy","title":"Design Philosophy","text":"<p>The JGMusic interface is intentionally kept minimal, making an attempt to only use ASCII characters for any sort of display, information panels, or information messages. No need for anything fancy if something simple does the trick. See the <code>;info</code> command for an example.</p> <p>Additionally, Discord's Slash Commands are clunky and awkward. the keyboard placement of the <code>/</code> requires a relatively far reach compared to JGMusic's <code>;</code> prefix. Although Slash Commands might be intuitive to use for new users, prefixed commands are not that difficult to learn and are much faster to fire once fluency is established. This bot will NEVER make use of slash commands.</p>"},{"location":"#final-remarks","title":"Final Remarks","text":"<p>As of now, JGMusic may be considered fairly bare-bones in there sense that there was no emphasis on role management. For example, other bots might have a \"DJ role\" that grants access to certain commands for users with the role. It may even be considered a template, containing functionality for core music playing features.</p> <p>Additionally, there were no plans to host this bot online either.</p> <p>These considerations may be subject to change in the future.</p>"},{"location":"additional/","title":"Additional Music Features","text":""},{"location":"additional/#overview","title":"Overview","text":"<p>The table below summarizes extra commands for more advanced bot usage. Click on any of them for more details, including special use cases, caveats, etc:</p> Command with Arguments<sup>1</sup> Aliases Cooldown Description <code>;apply_filter</code> <code>&lt;filter_name&gt;</code> <code>;f</code> 1s Applies a filter to the next song <code>;autoshuffle</code> <code>[to_ashuffle]</code> <code>;ashuffle</code> 1s Gets or sets queue autoshuffler status <code>;cancel</code> 1s Cancels an existing sleep timer <code>;daycore</code> <code>;dc</code> 1s Applies the daycore effect <code>;fast_forward</code> <code>[sec]</code> <code>;ff</code> 0.5s Seeks a short amount of time forward into a song <code>;forceskip</code> <code>;fs</code> 1s Skips a song and removes it from the queue <code>;info</code> <code>;i</code> 1s Shows audio, metadata, and progress bar information for current song <code>;info_global</code> <code>;ig</code> 1s Shows music information that doesn't get reset for each song <code>;jump</code> <code>&lt;pos&gt;</code> <code>;j</code> 2s Jumps to a timestamp in the song <code>;nightcore</code> <code>;nc</code> 1s Applies the nightcore effect <code>;normal</code> <code>;no</code> 1s Resets current effects and filters <code>;pitch</code> <code>&lt;factor&gt;</code> <code>;pi</code> 1s Changes the pitch of a song <code>;playback_history</code> <code>[display_last]</code> <code>;history</code>, <code>;hist</code> 1s Outputs the playback history <code>;playback_history_clear</code> <code>;hclear</code> 1s Clears the playback history <code>;playlist_link</code> <code>&lt;url&gt;</code> 3s Adds all songs in a playlist to the queue <code>;playlist_link</code> <code>&lt;url&gt;</code> 3s Adds all songs in a playlist to the queue <code>;rewind</code> <code>[sec]</code> <code>;rr</code> 0.5s Seeks a short amount of time backwards into the song <code>;sleep_in</code> <code>[dur]</code> <code>;leavein</code>, <code>;sleepin</code> 1s Makes the bot automatically leave the voice channel after some time <code>;speed</code> <code>&lt;factor&gt;</code> <code>;sp</code> 1s Changes the tempo of a song <code>;stream_prepend</code> <code>&lt;url&gt;</code> 1s Plays from a url (almost anything yt-dlp supports) and places it at the beginning of the queue <p>And some additional owner-only commands:</p> Command with Arguments<sup>1</sup> Aliases Cooldown Description <code>;local</code> <code>&lt;query&gt;</code> Plays a file from the local filesystem <code>;local_prepend</code> <code>&lt;query&gt;</code> Plays a file from the local filesystem and places it at the beginning of the queue <code>;reschedule</code> Reschedules the current guild onto the advancer task"},{"location":"additional/#commands","title":"Commands","text":"<p>Recategorize them later</p>"},{"location":"additional/#apply_filter","title":"<code>apply_filter</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Applies a filter to the next song</p> <p>The definition of \"filter\" here refers to any distortion of the audio source such that the speed does not change and the overall pitch doesn't change.</p> <p>Applying a specific filter affects all subsequent songs until a new filter is applied.</p> <p>The filter for the current song cannot be changed while the song is playing.</p> <p>Here is a table of the currently available filters:</p> Filter name Description <code>bassboost</code> Amplifies the bass of the song <code>default</code> No filter <code>deepfry</code> Low quality sound with intentional amplifiation of all frequencies to the extreme"},{"location":"additional/#arguments","title":"Arguments","text":"<ul> <li><code>filter_name</code> \u2013 Name of the filter to apply (see \"Filter name\" column)</li> </ul>"},{"location":"additional/#before-invoking-conditions","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#autoshuffle","title":"<code>autoshuffle</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Gets or sets queue autoshuffler status</p> <p>Randomly shuffles the queue once every 5 seconds if on.</p> <p>If no arguments are provided, then this command simply prints if the autoshuffler is on or off.</p>"},{"location":"additional/#arguments_1","title":"Arguments","text":"<ul> <li><code>to_ashuffle</code> \u2013 (Optional) A boolean value (True/False) representing the state of the autoshuffler</li> </ul>"},{"location":"additional/#before-invoking-conditions_1","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#cancel","title":"<code>cancel</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Cancels an existing sleep timer</p> <p>Deactivates the sleep timer's task of automatically leaving the voice channel after a period of time, if there is a task running.</p> <p>Forcing the bot to <code>leave</code> the voice channel forces a cancel.</p>"},{"location":"additional/#before-invoking-conditions_2","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#daycore","title":"<code>daycore</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Applies the daycore effect, opposite of <code>nightcore</code></p> <p>In terms of this bot, an effect is defined as a pitch change or a tempo change in the song.</p> <p>The daycore effect is achieved by applying a 20% decrease in tempo and pitch. This effect is common enough to warrant its own command for ease of usage.</p> <p>When run, the daycore effect will be applied to the next song played.</p>"},{"location":"additional/#before-invoking-conditions_3","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#fast_forward","title":"<code>fast_forward</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Seeks a short amount of time forward into a song</p> <p>If no argument is specified, this command defaults to seeking forward 5 seconds. Otherwise, the amount of seconds seeked forward must be an integer in between 1 and 15.</p> <p>Fast forwarding when a speed effect is applied makes no difference from fast forwarding on 1x speed. This command will seek to the same location given the same starting point of a song for any tempo.</p> <p>If the specified seek time goes beyond the end of the song, this command will move forward by the remaining time until the end of the song.</p>"},{"location":"additional/#arguments_2","title":"Arguments","text":"<ul> <li><code>sec</code> \u2013 (Optional, Default = 5) The amount of seconds to seek forward into the current song. Limited from 1 to 15 seconds.</li> </ul>"},{"location":"additional/#before-invoking-conditions_4","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be in the process of playing something</li> </ul> Warning <p>For an unspecified reason (most likely due to latency), fast forwarding on streamed audio longer than ~15 minutes tends to cause delays. See this Stack Overflow post for more details.</p> <p>Slight buffering may also be noticeable when running this command while the tempo of the song is slower than normal.</p> <p>Executing this command extremely quickly in succession may cause the bot to freeze on the current song, which is usually resolved with a reschedule.</p>"},{"location":"additional/#forceskip","title":"<code>forceskip</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Skips a song and removes it from the queue</p> <p>Forceskip is a more advanced version of skip. It allows \"forcefully\" skipping songs that are currently playing. When a song is forcefully skipped, it gets removed from the queue which means that even if the queue is looping, the forceskipped song will not reappear again.</p> <p>This command uses the <code>reschedule</code> command behind the scenes in a way such that it is more resilient to spamming.</p>"},{"location":"additional/#before-invoking-conditions_5","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#info","title":"<code>info</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Shows audio, metadata, and progress bar information for current song</p> <p>The very first line upon running this command will show the direct query that the user made to queue the song.</p> <p>Next, two tables outlining audio and metadata information:</p> Metadata InfoAudio Info Field Description (if applicable) <code>DOMAIN</code> Name of the website which the query was taken from <code>ID</code> The query URL's unique identifier <code>LINK</code> Direct link to the query URL <code>TITLE</code> Title retrieved from the query URL. Usually more complete than the actual query. <code>UPLOADER</code> User who was responsible for uploading/curating the query URL Field Description (if applicable) <code>EFFECTS</code> The tempo and pitch being used for the currently playing song, formatted <code>x# speed, x# pitch</code>. See <code>speed</code> and <code>pitch</code> for more details. <code>FILTER</code> The filter being used for the currently playing song. See <code>apply_filter</code> for more details. <code>VOLUME</code> The volume of the currently playing sone. See <code>volume</code> for more details. <p>A progress bar keeps track how far into the song one is, acting like a playhead. To the right of the progress bar includes the total time into the song and the duration of the entire song.</p> <p>If the song is a livestream, then a <code>(live)</code> will be there to indicate so, the total time of the song will be <code>00:00:00</code>. Time into the song will still be tracked normally. In addition, <code>(paused)</code> will be shown if the song is paused.</p> <p>The metadata information will be different for songs added locally. That is, whatever mutagen is able to extract from the local audio file.</p>"},{"location":"additional/#before-invoking-conditions_6","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul> Warning <p>The progress bar/seek head showing total time into the song will be slightly in accurate for longer songs. The longer the song the more inaccurate. For most cases, this inaccuracy is negligible.</p> Example Sample Command Output<pre><code>;stream pink floyd\n\nDOMAIN   youtube.com\nID       k9ynZnEBtvw\nLINK     https://www.youtube.com/watch?v=k9ynZnEBtvw\nTITLE    Pink Floyd - The Dark Side Of The Moon (50th Anniversary) [2023 Remaster] {Full Album}\nUPLOADER Pink Floyd\n\nEFFECTS  x0.8 speed, x0.8 pitch\nFILTER   default\nVOLUME   100.0%\n\n[#######.............] 00:15:08/00:42:56\n</code></pre>"},{"location":"additional/#info_global","title":"<code>info_global</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Shows music information that generally doesn't get reset for each song</p> <p>The basic command description explains why this command has the name \"global\". These global features are outlined in the following table:</p> Field Description <code>AUTOSHUFFLE_TASK</code> Indicates if the autoshuffler is on or not. Takes on values of <code>running</code> and <code>None</code>. See <code>autoshuffle</code> for more details. <code>NEXT_EFFECTS</code> The effects that will be applied to the next song. In the form of <code>x# speed, x# pitch</code>. See <code>speed</code> and <code>pitch</code> for more details. <code>NEXT_FILTER</code> The filter that will be applied to the next song. See <code>apply_filter</code> for more details. <code>HISTORY_SIZE</code> Minimum of the total number of songs played and 100, the maximum size of the playback history queue. See <code>playback_history</code> for more details <code>LOOP_TYPE</code> Describes if the queue is looping or not (and the type of loop if it is). See <code>loop</code> for more details. <code>PAUSED</code> <code>True</code>/<code>False</code>, if the bot is paused. <code>PLAYING</code> <code>True</code>/<code>False</code>, if the bot is playing. <code>PROCESSING</code> JoshGone Music internal state for music advancing. Takes on <code>True</code>/<code>False</code>. See this page for more information. <code>QUEUE_LENGTH</code> Number of songs in the queue. <code>SLEEP_TIMER_TASK</code> Indicates if a sleep timer is on ir not. Takes on values of <code>running</code> and <code>None</code>. See <code>sleep_in</code> for more details. <code>SONGS_PLAYED</code> Number of songs that have been played so far. Includes those skipped manually or from error. <code>WAITING</code> JoshGone Music internal state for music advancing. Takes on <code>True</code>/<code>False</code>. See this page for more information. <p>This command may be run as long as the bot is connected to a voice channel.</p>"},{"location":"additional/#before-invoking-conditions_7","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul> Example Sample Command Output<pre><code>AUTOSHUFFLE_TASK running\nGLOBAL_EFFECTS   x1.2 speed, x1.2 pitch\nGLOBAL_FILTER    default\nHISTORY_SIZE     10\nLOOP_TYPE        no loop\nPAUSED           False\nPLAYING          False\nPROCESSING       False\nQUEUE_LENGTH     0\nSLEEP_TIMER_TASK None\nSONGS_PLAYED     10\nWAITING          False\n</code></pre>"},{"location":"additional/#jump","title":"<code>jump</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Jumps to a timestamp in the song</p> <p>The timestamp <code>&lt;pos&gt;</code> (as specified below) can be specified in terms of number of seconds or <code>[HH:[MM:]]SS</code>. The latter means that seconds are always mandatory, then followed by minutes and hours.</p> <p>Seconds alone can range from 0 to 359999. If seconds is used as part of the latter form, then it only goes up to 59. The same happens with minutes. Hours can go up to 99.</p> <p>Jumping is possible when the current song is paused and does not automatically resume the song when done. Jumping also preserves things like volume, filters, and effects.</p> <p>If jumped further than the current song's length, the song gets skipped.</p>"},{"location":"additional/#arguments_3","title":"Arguments","text":"<ul> <li><code>pos</code> \u2013 The timestamp to jump to. Either in seconds or <code>[[HH;]MM:]SS</code> format.</li> </ul>"},{"location":"additional/#before-invoking-conditions_8","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be in the process of playing something</li> </ul> Warning <p>Jumping to further locations be slightly in accurate for longer songs. The longer the song the more inaccurate. For most cases, this inaccuracy is negligible.</p> Example <p>Jump to 1 minute and 30 seconds</p> <pre><code>;j 1:30\n</code></pre> <p>Jump to 1 minute and 30 seconds</p> <pre><code>;j 90\n</code></pre> <p>Jump to 1 hour and 30 seconds</p> <pre><code>;j 1:30:00\n</code></pre> <p>Jump to 99 hours and 59 minutes</p> <pre><code>;j 99:59:00\n</code></pre> <p>Jump to 5 minutes</p> <pre><code>;j 5:00\n</code></pre> <p>Jump to 1 second less than 10 minutes</p> <pre><code>;j 9:59\n</code></pre> <p>Jump to the maximum time allowed</p> <pre><code>;j 99:59:59\n</code></pre> <p>Jump to the maximum time allowed</p> <pre><code>;j 359999\n</code></pre> <p>Jump to the beginning of a song</p> <pre><code>;j 0\n</code></pre>"},{"location":"additional/#nightcore","title":"<code>nightcore</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Applies the nightcore effect, opposite of <code>daycore</code></p> <p>In terms of this bot, an effect is defined as a pitch change or a tempo change in the song.</p> <p>The nightcore effect is achieved by applying a 20% increase in tempo and pitch. This effect is common enough to warrant its own command for ease of usage.</p> <p>When run, the nightcore effect will be applied to the next song played.</p>"},{"location":"additional/#before-invoking-conditions_9","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#normal","title":"<code>normal</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Resets current effects and filters</p> <p>Changes will be applied to the next song. To be specific, sets the tempo to x1, pitch to x1, and the filter to <code>default</code>.</p>"},{"location":"additional/#before-invoking-conditions_10","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#pitch","title":"<code>pitch</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Changes the pitch of a song</p> <p>A change in pitch is applying an effect. The definition of effect is a pitch or tempo change to the song. Changes are applied to the next song.</p> <p>A value for the pitch <code>factor</code> that isn't a power of 2 (not x0.25, x0.5, x1, x2, x4) will shift the key of the song.</p>"},{"location":"additional/#arguments_4","title":"Arguments","text":"<ul> <li><code>factor</code> \u2013 The factor in which to change the pitch by. Limited between x0.25 to x4.</li> </ul>"},{"location":"additional/#before-invoking-conditions_11","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul> Warning <p>This command requires FFmpeg to be compiled with librubberband.</p>"},{"location":"additional/#playback_history","title":"<code>playback_history</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Outputs the playback history</p> <p>This command displays a maximum of 100 songs but keeps track of the total number of songs plays. The names of the items in the playback history are the direct queries that the user made.</p> <p>If the specified number of songs to include in playback history output includes all the songs ever played by the bot, the total songs played counter will not be displayed.</p> <p>Songs in the playback history outputs are numbered 1 to <code>display_last</code>. The smaller the number, the more recently played it was.</p> <p>This command will notify the user if there is no playback history. If output is too long, the bot will send multiple messages.</p>"},{"location":"additional/#arguments_5","title":"Arguments","text":"<ul> <li><code>display_last</code> \u2013 (Optional, Default = 5) Display last <code>display_last</code> songs played</li> </ul>"},{"location":"additional/#before-invoking-conditions_12","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#playback_history_clear","title":"<code>playback_history_clear</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Clears the playback history</p> <p>In addition to clearing the playback history, it also resets the number of songs played. If the bot leaves the voice channel, the playback history gets automatically cleared.</p>"},{"location":"additional/#before-invoking-conditions_13","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#playlist_link","title":"<code>playlist_link</code>","text":"<p><sup>  v1.0.0  v2.0.0  Experimental </sup></p> <p>Adds all songs in a playlist to the queue</p> <p>A playlist is any online collection of songs that yt-dlp is able to support. It essentially loops through all the songs in the playlist and adds them in via <code>;stream</code>. These songs are usually links.</p> <p>Wrapping the playlist link with angle brackets (<code>&lt;&gt;</code>) wraps all links in the playlist in brackets, effectively preventing individual links to show an embed (like when running the <code>;current</code> command).</p> <p>This command has only been tested for YouTube and SoundCloud playlists:</p> <ul> <li>YouTube playlists are formatted like <code>https://www.youtube.com/playlist?list=&lt;id&gt;</code></li> <li>SoundCloud playlists are formatted like <code>https://soundcloud.com/&lt;user&gt;/sets/&lt;playlist&gt;</code></li> </ul>"},{"location":"additional/#arguments_6","title":"Arguments","text":"<ul> <li><code>url</code> \u2013 Link to the online playlist</li> </ul>"},{"location":"additional/#before-invoking-conditions_14","title":"Before Invoking Conditions","text":"<ul> <li>Either user or bot must be connected to a voice channel</li> </ul> Example <p>Running this command:</p> <pre><code>;playlist_link &lt;https://www.youtube.com/playlist?list=PLocQeghkorOWXJ3tu8YwNfbwjxTJ2UZWV&gt;\n</code></pre> <p>And then <code>;queue</code> immediately after should output:</p> <pre><code>Queue [56] (no loop):\n1: &lt;https://www.youtube.com/watch?v=z-ys_60gmEE&gt;\n2: &lt;https://www.youtube.com/watch?v=edpbsFvypK0&gt;\n3: &lt;https://www.youtube.com/watch?v=clVx1bccHpU&gt;\n4: &lt;https://www.youtube.com/watch?v=osRSZaCswds&gt;\n5: &lt;https://www.youtube.com/watch?v=-uH2_sPJuLw&gt;\n6: &lt;https://www.youtube.com/watch?v=wdCbjTSQwn4&gt;\n7: &lt;https://www.youtube.com/watch?v=P3UguXUvECM&gt;\n8: &lt;https://www.youtube.com/watch?v=WTaABER2IgI&gt;\n9: &lt;https://www.youtube.com/watch?v=vMbGOlMvmFU&gt;\n10: &lt;https://www.youtube.com/watch?v=ubd3IRnogAk&gt;\n11: &lt;https://www.youtube.com/watch?v=saZ0ZKE8sdo&gt;\n12: &lt;https://www.youtube.com/watch?v=qD54sROmeIM&gt;\n13: &lt;https://www.youtube.com/watch?v=SySHO4W00fs&gt;\n14: &lt;https://www.youtube.com/watch?v=BoNDM-0PMjM&gt;\n15: &lt;https://www.youtube.com/watch?v=UiOAyrrtbOs&gt;\n16: &lt;https://www.youtube.com/watch?v=aup_iSqqAXE&gt;\n17: &lt;https://www.youtube.com/watch?v=elAG4FsjkuA&gt;\n18: &lt;https://www.youtube.com/watch?v=wSRAdi1wVW0&gt;\n19: &lt;https://www.youtube.com/watch?v=tDOla8ZFVKo&gt;\n20: &lt;https://www.youtube.com/watch?v=XORwfYUH23Y&gt;\n21: &lt;https://www.youtube.com/watch?v=U7v2e_piJUc&gt;\n22: &lt;https://www.youtube.com/watch?v=rBU8wRCnaUM&gt;\n23: &lt;https://www.youtube.com/watch?v=R-kmPds0KSM&gt;\n24: &lt;https://www.youtube.com/watch?v=wmmj7Giie6g&gt;\n25: &lt;https://www.youtube.com/watch?v=Uc7567tTjOw&gt;\n26: &lt;https://www.youtube.com/watch?v=LCdWr3Zrt5s&gt;\n27: &lt;https://www.youtube.com/watch?v=_VDR2eLwtpo&gt;\n28: &lt;https://www.youtube.com/watch?v=gADlgxrnAdQ&gt;\n29: &lt;https://www.youtube.com/watch?v=QVhkyh5OYSU&gt;\n30: &lt;https://www.youtube.com/watch?v=N_ILB4bQsLA&gt;\n31: &lt;https://www.youtube.com/watch?v=zeCwfZWNt70&gt;\n32: &lt;https://www.youtube.com/watch?v=BVP65Rg8myE&gt;\n33: &lt;https://www.youtube.com/watch?v=Qc11_jkOKx0&gt;\n34: &lt;https://www.youtube.com/watch?v=9N4airsRCV0&gt;\n35: &lt;https://www.youtube.com/watch?v=WsWkLVi2Xf8&gt;\n36: &lt;https://www.youtube.com/watch?v=foaw2arHA50&gt;\n37: &lt;https://www.youtube.com/watch?v=wu0I5h6wG34&gt;\n38: &lt;https://www.youtube.com/watch?v=E8e19xlb7mM&gt;\n39: &lt;https://www.youtube.com/watch?v=I4VD4OwUhDw&gt;\n40: &lt;https://www.youtube.com/watch?v=1qVrPtq2tcg&gt;\n41: &lt;https://www.youtube.com/watch?v=pt6R-_-aEzY&gt;\n42: &lt;https://www.youtube.com/watch?v=5y1lp540t_c&gt;\n43: &lt;https://www.youtube.com/watch?v=--uwRamO3ws&gt;\n44: &lt;https://www.youtube.com/watch?v=prNruaG9iDA&gt;\n45: &lt;https://www.youtube.com/watch?v=aC4H7o53Ng4&gt;\n46: &lt;https://www.youtube.com/watch?v=l03BFd3wDaE&gt;\n47: &lt;https://www.youtube.com/watch?v=KsReWI83IC8&gt;\n48: &lt;https://www.youtube.com/watch?v=13wdFhH34Ms&gt;\n49: &lt;https://www.youtube.com/watch?v=-wbSvwa9hQk&gt;\n50: &lt;https://www.youtube.com/watch?v=h66Ys4BXCU8&gt;\n51: &lt;https://www.youtube.com/watch?v=dmzuBBu-O7Q&gt;\n52: &lt;https://www.youtube.com/watch?v=ZhIs6rUn7Pg&gt;\n53: &lt;https://www.youtube.com/watch?v=3grkLm0pabA&gt;\n54: &lt;https://www.youtube.com/watch?v=uDcpSJIdx5g&gt;\n55: &lt;https://www.youtube.com/watch?v=kszjdpUF0Js&gt;\n56: &lt;https://www.youtube.com/watch?v=aSRHJmNJuQU&gt;\n</code></pre> <p>This playlist contains YouTube links to all songs from the Cuphead OST.</p> Warning <p>When adding a SoundCloud playlist with more than 5 songs, the 6<sup>th</sup> song and beyond will be an API link in the format of <code>https://api-v2.soundcloud.com/tracks/&lt;track_id&gt;</code>. The first 5 songs will be how they are normally displayed as an online link.</p>"},{"location":"additional/#rewind","title":"<code>rewind</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Seeks a short amount of time backwards into the song</p> <p>If no argument is specified, this command defaults to seeking backward 5 seconds. Otherwise, the amount of seconds seeked backward must be an integer in between 1 and 15.</p> <p>Rewinding when a speed effect is applied makes no difference from fast forwarding on 1x speed. This command will seek to the same location given the same starting point of a song for any tempo.</p> <p>Unlike <code>;fast_forward</code>, only a certain amount of time may be seeked backward, and this amount of time depends on the current playback speed:</p> <ul> <li>~15 seconds for x0.25 speed</li> <li>75 seconds for x1 speed</li> <li>nearly 5 minutes for 4x speed</li> </ul> <p>This is because the bot caches some of the raw audio that gets played and this difference in speed keeps the size of this cache consistent for different playback speeds.</p> <p>If the rewind time goes beyond what the cache can store or the beginning of the song, this command will truncate the rewind time to a value less than what was specified.</p>"},{"location":"additional/#arguments_7","title":"Arguments","text":"<ul> <li><code>sec</code> \u2013 (Optional, Default = 5) The amount of seconds to seek backward into the current song. Limited from 1 to 15 seconds.</li> </ul>"},{"location":"additional/#before-invoking-conditions_15","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be in the process of playing something</li> </ul>"},{"location":"additional/#sleep_in","title":"<code>sleep_in</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Makes the bot automatically leave the voice channel after some time</p> <p>More specifically, this command creates a sleep timer. Once the timer counts down to 0, the bot will automatically leave the voice channel. There can be only one sleep timer running at a time, and sleep timers operate on a server-level.</p> <p>If the argument <code>dur</code> is not specified, then this command will show if a sleep timer is running and how much time it will take for the bot to disconnect from the voice channel. This time may not be super accurate due to some Discord latency.</p> <p>If specifying the <code>dur</code> argument, please refer to the <code>;jump</code> command for a description on how to format it.</p> <p>Once the bot leaves the voice channel, all the information specified in <code>;info</code> and <code>;info_global</code> will be reset.</p>"},{"location":"additional/#arguments_8","title":"Arguments","text":"<ul> <li><code>dur</code> \u2013 (Optional) Time until the bot leaves the voice channel. Either in seconds or <code>[[HH;]MM:]SS</code> format.</li> </ul>"},{"location":"additional/#before-invoking-conditions_16","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#speed","title":"<code>speed</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Changes the tempo of a song</p> <p>A change in tempo is applying an effect. The definition of effect is a pitch or tempo change to the song. Changes are applied to the next song.</p> <p>When this effect is applied to a song, the relative time of the song is kept constant. This means that doing <code>;fast_foward</code>s and <code>;rewind</code>s will result in the same start and end seek positions no matter what the tempo may be. Another way to think about this is if:</p> <ul> <li><code>factor</code> &gt; 1, then it will take less than 10 seconds for the song to reach the 10 second timestamp shown in <code>;info</code></li> <li><code>factor</code> &lt; 1, then it will take more than 10 secods for the song tor each 10 second timestamp shown in <code>;info</code></li> </ul>"},{"location":"additional/#arguments_9","title":"Arguments","text":"<ul> <li><code>factor</code> \u2013 The factor in which to change the tempo by. Limited between x0.25 to x4.</li> </ul>"},{"location":"additional/#before-invoking-conditions_17","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul> Warning <p>This command requires FFmpeg to be compiled with librubberband.</p>"},{"location":"additional/#stream_prepend","title":"<code>stream_prepend</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Plays from a url (almost anything yt-dlp supports) and places it at the beginning of the queue</p> <p>Exact same as <code>;stream</code> but when placing the song into the queue, it places it in the beginning rather than the end. A prepended song placed in the queue will be played next provided no autoshuffler is active.</p>"},{"location":"additional/#arguments_10","title":"Arguments","text":"<ul> <li>Exact same as <code>;stream</code></li> </ul>"},{"location":"additional/#before-invoking-conditions_18","title":"Before Invoking Conditions","text":"<ul> <li>Exact same as <code>;stream</code></li> </ul>"},{"location":"additional/#owner-only","title":"Owner Only","text":""},{"location":"additional/#local","title":"<code>local</code>","text":"<p><sup>  v1.0.0  v2.0.0  Experimental </sup></p> <p>Plays a file from the local filesystem</p> <p>The bot that anything added with this command will be fetched form the local filesystem. Songs on the local filesystem may be in a variety of common audio formats (<code>.mp3</code>, <code>.wav</code>, <code>.ogg</code>, etc.)<sup>2</sup>.</p> <p>Like the <code>;stream</code> command, <code>;local</code> places the query in the queue as a local type if a current song is playing. It plays the from the file if nothing is playing. Play here means reading the raw data from the audio file.</p> <p>This command also supports the following special queries:</p> <ul> <li><code>prev</code>: Queries the previously played song and adds it to the queue if it exists and it was added with this command or <code>;local_prepend</code> (is a local query)</li> <li><code>cur</code>: Queries the currently playing song and adds it to the queue if it exists and it was added with this command or <code>;local_prepend</code> (is a local query)</li> </ul> <p>This command also supports the addition of links with embeds hidden by the <code>&lt;&gt;</code>.</p> <p>Although there is no length limit on local file paths, their sizes will be naturally limited by the user's operating system.</p>"},{"location":"additional/#arguments_11","title":"Arguments","text":"<ul> <li><code>query</code> \u2013 The local file path to the song</li> </ul>"},{"location":"additional/#before-invoking-conditions_19","title":"Before Invoking Conditions","text":"<ul> <li>Either user or bot must be connected to a voice channel</li> </ul>"},{"location":"additional/#local_prepend","title":"<code>local_prepend</code>","text":"<p><sup>  v2.0.0  v2.0.0  Experimental </sup></p> <p>Plays from a url (almost anything yt-dlp supports) and places it at the beginning of the queue</p> <p>Exact same as <code>;local</code> but when placing the song into the queue, it places it in the beginning rather than the end. A prepended song placed in the queue will be played next provided no autoshuffler task is active.</p>"},{"location":"additional/#arguments_12","title":"Arguments","text":"<ul> <li>Same as <code>;local</code></li> </ul>"},{"location":"additional/#before-invoking-conditions_20","title":"Before Invoking Conditions","text":"<ul> <li>Same as <code>;local</code></li> </ul>"},{"location":"additional/#reschedule","title":"<code>reschedule</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Reschedules the current guild onto the advancer task</p> <p>When playing audio, sometimes something unexpected happens and the bot chokes up and gets stuck in the middle of a song with no way to <code>;skip</code>. Compared to restarting and rejoining, invoking this command is the least destructive way to fix this issue. In other words, it forcefully restarts the queue advancement loop.</p> <p>For an in-depth explanation, see this page.</p>"},{"location":"additional/#before-invoking-conditions_21","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul> <ol> <li> <p><code>[optinal argument] &lt;required arguiment&gt;</code> \u21a9\u21a9</p> </li> <li> <p>This command supports all audio formats that Mutagen supports\u00a0\u21a9</p> </li> </ol>"},{"location":"basic/","title":"Basic Features","text":""},{"location":"basic/#overview","title":"Overview","text":"<p>The table below summarizes all the commands for basic bot usage. Click on any of them for more details, including special use cases, caveats, etc.</p> Command with Arguments<sup>1</sup> Aliases Cooldown Description <code>;batch-add</code> <code>&lt;urls&gt;</code> 2s Plays from multiple URLs split by lines <code>;clear</code> 1s Clears all songs in queue <code>;current</code> <code>;c</code> 0.5s Shows the current song <code>;join</code> <code>&lt;channel&gt;</code> 1s Joins a voice channel <code>;leave</code> 1s Disconnects the bot from voice and clears the queue <code>;loop</code> <code>[loop]</code> 1s Gets or sets queue looping <code>;move</code> <code>&lt;origin&gt; &lt;target&gt;</code> <code>;mv</code> 1s Moves a song on queue <code>;pause</code> <code>;stop</code> 0.5s Pauses playing <code>;queue</code> <code>;q</code> 1s Shows the songs on queue <code>;remove</code> <code>&lt;position&gt;</code> <code>;rm</code> 1s Removes a song on queue <code>;resume</code> <code>;start</code> 0.5s Resumes playing <code>;shuffle</code> <code>;shuffle</code> 1s Shuffles the queue <code>;skip</code> <code>;s</code> 1s Skips current song <code>;stream</code> <code>&lt;url&gt;</code> <code>;yt</code>, <code>;play</code>, <code>;p</code> 1s Plays from a url (almost anything yt-dlp supports) <code>;volume</code> <code>[volume]</code> 1s Gets or changes the player's volume"},{"location":"basic/#commands","title":"Commands","text":"<p>Recategorize them later</p>"},{"location":"basic/#batch_add","title":"<code>batch_add</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Plays from multiple URLs split by lines.</p> <p>Splits the URLs by appropriate line termination character and individually <code>stream</code>s each query. Does not support specification of local queries. Assuming no lag, there is approximately a 0.1 second delay between additions.</p>"},{"location":"basic/#arguments","title":"Arguments","text":"<ul> <li><code>urls</code> \u2013 (Required) The multiline string of URLs to be <code>stream</code>ed, separated by Enter keypresses</li> </ul>"},{"location":"basic/#before-invoking-conditions","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul> Example <p>Running</p> <pre><code>;batch_add\nBohemian Rhapsody - Queen\nBillie Jean - Michael Jackson\nHotel California - Eagles\nSweet Child o' Mine - Guns N' Roses\nRolling in the Deep - Adele\n</code></pre> <p>will stream [ref] those songs in that order. Note that for longer lists, Discord will only allow the rapid sending of 5 messages at a time.</p>"},{"location":"basic/#clear","title":"<code>clear</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Clears all songs in queue.</p> <p>This command does nothing if there are no songs in the queue. Clearing the queue does not do anything to a current playing song.</p>"},{"location":"basic/#before-invoking-conditions_1","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"basic/#current","title":"<code>current</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Shows the current song</p> <p>The current song is the exact text word-for-word that was queried. If the current song cannot be retrieved, the query will be <code>None</code>.</p>"},{"location":"basic/#before-invoking-conditions_2","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"basic/#join","title":"<code>join</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Joins a voice channel</p> <p>Also controls where bot messages are sent. Text output will be sent from the channel this command was run in. This command can be run multiple times safely.</p>"},{"location":"basic/#arguments_1","title":"Arguments","text":"<ul> <li><code>channels</code> \u2013 The name or id to the voice channel</li> </ul>"},{"location":"basic/#leave","title":"<code>leave</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Disconnects the bot from voice and clears the queue</p> <p>In addition to clearing the queue, this command also erases all global bot information.</p>"},{"location":"basic/#loop","title":"<code>loop</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Gets or sets queue looping</p> <p>By default the queue is not set to loop. The user can set three types of looping options, specified by the <code>loop</code> argument:</p> <ul> <li>If <code>loop</code> = 0, no loop</li> <li>If <code>loop</code> &gt; 0, loop all songs</li> <li>If <code>loop</code> &lt; 0, loop one song</li> </ul> <p>If no argument is passed, it shows the type of looping as either <code>0</code>, <code>1</code>, or <code>-1</code>.</p>"},{"location":"basic/#arguments_2","title":"Arguments","text":"<ul> <li><code>loop</code> \u2013 (Optional) An integer specifying the loop type</li> </ul>"},{"location":"basic/#before-invoking-conditions_3","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"basic/#move","title":"<code>move</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Moves a song on queue</p> <p>The playback queue is effectively 1-indexed. This means position 1 of the queue represents the first item in the queue, 2 the second item, and so on. The <code>move</code> command also supports negative indices where position -1 represents the last item in the queue, -2 the 2<sup>nd</sup> last item, etc.</p> <p>When a song gets moved from <code>origin</code> to <code>target</code>, <code>origin</code><sup>2</sup> does not swap places with the song at <code>target</code><sup>2</sup>. Instead, <code>target</code> gets changed to <code>origin</code> and all songs after <code>target</code> gets pushed back one position.</p>"},{"location":"basic/#arguments_3","title":"Arguments","text":"<ul> <li><code>origin</code> \u2013 The position in queue of the song to be moved</li> <li><code>target</code> \u2013 The position in queue in which the moved song will occupy</li> </ul>"},{"location":"basic/#before-invoking-conditions_4","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"basic/#pause","title":"<code>pause</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Pauses playing</p> <p>Pausing the voice client. This command can be used multiple times.</p>"},{"location":"basic/#before-invoking-conditions_5","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be in the process of playing something</li> </ul>"},{"location":"basic/#queue","title":"<code>queue</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Shows the songs on queue</p> <p>The first line of the queue specifies size as well as the type of <code>loop</code>.</p> <p>If there are no songs in the queue, the next line will be <code>None</code>.</p> <p>If there are songs in the queue, this command outputs and numbers them from 1 to the total queue size. Each item in the queue is the exact song query that the user specified with the <code>stream</code> command.</p> <p>If the queue exceeds the discord message limit size, it will be printed as multiple messages.</p>"},{"location":"basic/#before-invoking-conditions_6","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to voice channel</li> </ul>"},{"location":"basic/#remove","title":"<code>remove</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Removes a song on queue</p> <p>Likewise to <code>move</code>, the <code>remove</code> command accepts both positive and negative positions. After removal, songs below the removed song are then shifted up one position to accommodate for the gap.</p>"},{"location":"basic/#arguments_4","title":"Arguments","text":"<ul> <li><code>position</code> \u2013 The position of the song in the queue to be removed</li> </ul>"},{"location":"basic/#before-invoking-conditions_7","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to voice channel</li> </ul>"},{"location":"basic/#resume","title":"<code>resume</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Resumes playing</p> <p>Resumes the voice client to play the paused song. This command can be used repeatedly.</p>"},{"location":"basic/#before-invoking-conditions_8","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be in the process of playing something</li> </ul>"},{"location":"basic/#shuffle","title":"<code>shuffle</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Shuffles the queue</p> <p>The shuffle process is to randomly scramble the order of the songs in queue. Queue stays the same if there are 0 or 1 songs in the queue.</p>"},{"location":"basic/#before-invoking-conditions_9","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul>"},{"location":"basic/#skip","title":"<code>skip</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Skips current song</p> <p>Stops playing of the current song, which in turn causes the automatic fetching of the next song, which depends on the looping condition.</p> <p>If no loop is set on the queue, skipping causes the current song to be removed from the queue.</p> <p>Skipping a paused song does not persist the pause for the next song.</p>"},{"location":"basic/#before-invoking-conditions_10","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul> Warning <p>Having this command run in quick succession is known to cause the bot to freeze on the current song. The usual way to resolve the bot freezing is to reschedule.</p>"},{"location":"basic/#stream","title":"<code>stream</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Plays from a url (almost anything yt-dlp supports)</p> <p>Places the url to be streamed in the queue if a current song is playing. Plays<sup>3</sup> the url's stream if this command is used is nothing is playing.</p> <p>The \"url\" specified doesn't have to a url specifically. It can be any text query to be searched (on YouTube under normal usage). To be technical, \"url\" is the query passed into the yt-dlp <code>URL</code> argument.</p> <p>This command also supports the following special queries:</p> <ul> <li><code>prev</code>: Queries the previously played song and adds it to the queue if it exists and it was added with this command or <code>;stream_prepend</code> (is a streamed query)</li> <li><code>cur</code>: Queries the currently playing song and adds it to the queue if it exists and it was added with this command or <code>;stream_prepend</code> (is a streamed query)</li> </ul> <p>This command also supports the addition of links with embeds hidden by the <code>&lt;&gt;</code>.</p> <p>The query must be printable<sup>4</sup> and not longer than 100 characters.</p>"},{"location":"basic/#arguments_5","title":"Arguments","text":"<ul> <li><code>url</code> \u2013 The song query (that gets fetched as a streamable link)</li> </ul>"},{"location":"basic/#before-invoking-conditions_11","title":"Before Invoking Conditions","text":"<ul> <li>Either user or bot must be connected to a voice channel</li> </ul> Tip <p>Sometimes a song might exist on one site but not in another. To specify a song to be played on SoundCloud for example, one can do:</p> <pre><code>;stream scsearch: damper float\n</code></pre> <p>to search SoundCloud for the song \"damper float\" instead of YouTube, simply by specifying the <code>scsearch:</code> prefix.</p> <p>If no prefix is specified as with normal usage of the command, it defaults to searching YouTube.</p> <p>A list of supported prefixes can be found here.</p> Example <p>YouTube query: <pre><code>;p SZA - Kill Bill\n</code></pre></p> <p>YouTube link (Laura Brehm - Parallel): <pre><code>;p https://www.youtube.com/watch?v=kWVNbXvIpxU\n</code></pre></p> <p>YouTube livestream (will bring up a livestream most of the time): <pre><code>;p Lofi Girl livestream\n</code></pre></p> <p>SoundCloud query: <pre><code>;p scsearch: Snail's House Pixel Galaxy\n</code></pre></p> <p>SoundCloud link without embed (elmo &amp; Nico Harris - Mirage (feat. Israel Strom)): <pre><code>;p &lt;https://soundcloud.com/radiojuicy1/elmo-nico-harris-mirage&gt;\n</code></pre></p> <p>Other link (10 Hours of Vinyl - That Diggin\u2019 Show Complete S03): <pre><code>;p https://vimeo.com/248460715\n</code></pre></p> <p>Play previous song: <pre><code>;p prev\n</code></pre></p> <p>Play current song: <pre><code>;p cur\n</code></pre></p> <p>Explicity search for the \"prev\" query: <pre><code>;p ytsearch: prev\n</code></pre></p>"},{"location":"basic/#volume","title":"<code>volume</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Gets or changes the player's volume</p> <p>Volume of the bot defaults to 100% for each new song played. The volume applied only persists for the duration of the current playing song.</p> <p>The bot is able to set the volume from 0% to 200%, thereore allowing for slight amplification.</p> <p>If the <code>volume</code> argument is not specified, then this command displays the volume of the current song.</p>"},{"location":"basic/#arguments_6","title":"Arguments","text":"<ul> <li><code>volume</code> \u2013 (Optional) The volume to set the bot to play at</li> </ul>"},{"location":"basic/#before-invoking-conditions_12","title":"Before Invoking Conditions","text":"<ul> <li>Bot must be connected to a voice channel</li> </ul> <ol> <li> <p><code>[optinal argument] &lt;required arguiment&gt;</code> \u21a9</p> </li> <li> <p>Starting from here until the end of this paragraph References of <code>origin</code> and <code>target</code> refer to \"song at <code>origin</code>\" and \"song at <code>target</code>\" respectively.\u00a0\u21a9\u21a9</p> </li> <li> <p>It actually forces a scheduled advancement of the queue. See reschedule and the dev log for more information.\u00a0\u21a9</p> </li> <li> <p>Put simply, it should be safely displayed and printed as human-readable text. Click here for more information.\u00a0\u21a9</p> </li> </ol>"},{"location":"dev/","title":"Developer Features","text":""},{"location":"dev/#overview","title":"Overview","text":"<p>This section contains an overview of commands located in <code>jgm/extensions/admin.py</code> and <code>jgm/extensions/database.py</code>. Which are owner-only commands that interface more closely with the bot's code.</p> <p>Additionally, this section also contains information on tools the bot offers that developers might find useful, like a REPL or database management details.</p> <p>Since these commands are not meant to be used by the average user, there is no point in having an alias or cooldown.</p> <p>First, common administrative commands:</p> Command with Arguments Description <code>;ctx_</code> Adds a context instance to the bot <code>;extensions</code> Lists all loaded extensions <code>;load</code> <code>&lt;module&gt;</code> Loads an extension/cog <code>;reload</code> <code>&lt;module&gt;</code> Reloads an extension/cog <code>;shutdown</code> Shuts the bot down <code>;unload</code> <code>&lt;module&gt;</code> Unloads an extension/cog <code>;reinit</code> Reinitializes the bot for a server"},{"location":"dev/#admin-commands","title":"Admin Commands","text":""},{"location":"dev/#adminctx_","title":"<code>admin.ctx_</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Adds a context instance to the bot</p> <p>Adding a context instance to the global bot object requires manually running this command, which is useful for debugging in the REPL.</p>"},{"location":"dev/#adminextensions","title":"<code>admin.extensions</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Lists all loaded extensions</p> <p>Those that are loaded on startup are:</p> <ul> <li><code>jgm.extensions.admin</code></li> <li><code>jgm.extensions.playlists</code></li> <li><code>jgm.extensions.music</code></li> <li><code>jgm.extensions.database</code></li> <li><code>jgm.extensions.info</code></li> <li><code>jgm.extensions.repl</code><sup>1</sup></li> </ul>"},{"location":"dev/#adminload","title":"<code>admin.load</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Loads an extension/cog</p> <p>Loads with the <code>load_extension</code> coroutine function.</p>"},{"location":"dev/#arguments","title":"Arguments","text":"<ul> <li><code>module</code> \u2013 The extension/cog</li> </ul>"},{"location":"dev/#adminreload","title":"<code>admin.reload</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Reloads an extension/cog</p> <p>Reloads with the <code>reload_extension</code> coroutine function.</p> <p>This is almost the same as an unload followed by a load. See the <code>reload_extension</code> documentation for more information.</p>"},{"location":"dev/#arguments_1","title":"Arguments","text":"<ul> <li><code>module</code> \u2013 The extension/cog</li> </ul> Note <p>Running <code>;reload admin</code> on the bot will work, but running <code>;unload admin</code> followed by <code>;load admin</code> will not.</p> Warning <p>Although the bot was designed to support functionality to the fullest across cog loads and unloads (mainly for use during development, when a code modification is to be seen in action without needing to restart a bot), There is a chance that something might break after a reload.</p>"},{"location":"dev/#adminshutdown","title":"<code>admin.shutdown</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Shuts the bot down</p> <p>Shuts the bot down by awaiting the close() coroutine.</p>"},{"location":"dev/#adminunload","title":"<code>admin.unload</code>","text":"<p><sup>  v1.0.0  v1.0.0 </sup></p> <p>Unloads an extension/cog</p> <p>Unloads with the <code>unload_extension</code> coroutine function.</p>"},{"location":"dev/#arguments_2","title":"Arguments","text":"<ul> <li><code>module</code> \u2013 The extension/cog</li> </ul>"},{"location":"dev/#databasereinit","title":"<code>database.reinit</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Reinitializes the bot for a server</p> <p>To maintain the functionality of commands that require database reading like the <code>;playlist</code> commands, the server (guild) ID must exist under the <code>server</code> TABLE in the <code>jgmusic.db</code> database file.</p> <p>This command removes the current server the bot is in from the table (or does nothing if it doesn't exist), and adds it back in, thereby \"reinitializing\" it.</p>"},{"location":"dev/#database-information","title":"Database Information","text":"<p>Building off of More Setup, just Good Music uses SQLite for database management. In the code, asynchronous database management is handled with aiosqlite. Database migrations are handled with yoyo.</p> <p>Although the database for playlists is unlikely to evolve much, yoyo is a tool available for developers to take care of any database migrations if necessary. A list of common yoyo commands can be found here. Remember to append <code>hatch run\u00a0</code> before every command.</p> <p>Migration files are located in <code>./migrations</code>. More information regarding them can be found here. The purposes of this bot only requires one with simple apply and rollback steps.</p> <p>A server may contain 0 or more playlists but a specific playlist can come from one and only one server. A playlist cannot exist without a server. These relationships are outlined below in the entity-relation diagram. For more information, see the mermaid.js docs:</p> <pre><code>erDiagram\n    SERVER ||--o{ PLAYLIST : contains\n    SERVER {\n        integer server_id PK\n    }\n    PLAYLIST {\n        integer server_id \"PK,FK\"\n        text playlist_name \"PK\"\n        text playlist_text\n        integer owner_id\n    }</code></pre> <p>In the database, a servers TABLE stores all the server entities and a playlists TABLE stores all the playlist entities.</p>"},{"location":"dev/#the-repl","title":"The REPL","text":"<p>All the bot's functionality can be replicated via command line with an REPL (read-evaluate-print-loop), which is an incredibly useful tool for debugging the bot. The REPL is an adaptation of Python 3.9's asyncio REPL, using a subclass of Python's builtin <code>code</code> module's <code>InteractiveConsole</code> class.</p> <p>On startup, the REPL cog is loaded only if the <code>JGM_REPL</code> environment variable is set to 1 (see Setup for more details).</p> Warning <p>There is an issue with the REPL not being able to register the arrow keys (hence getting previous lines do not work). See this Stack Overflow post for more details</p> <p>As soon as <code>hatch run jgm</code> is run in the command prompt a message along the lines of the text below will be printed and the REPL will then be ready for use (yes, instead of the classic <code>&gt;&gt;&gt;</code>, pigs are used instead):</p> <pre><code>Loaded admin\nLoaded playlists\nLoaded music\nLoaded database\nLoaded info\nLoaded repl\nAll extensions loaded: [admin, playlists, music, database, info, repl]\nJoshGone logged on as JGMusic#7263.\nSQLite version is 3.37.2.\nInitializing bot `owner_id` [Workaround to potential bug].\nasyncio REPL 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux\nUse \"await\" directly instead of \"asyncio.run()\".\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\ud83d\udc37\ud83d\udc37\ud83d\udc37 |import asyncio\n\ud83d\udc37\ud83d\udc37\ud83d\udc37 |\n</code></pre> <p>Before using the REPL, it is useful to run <code>;ctx_</code> on the bot for access to the Context object.</p> REPLCommands <pre><code>\ud83d\udc37\ud83d\udc37\ud83d\udc37 |bot.ctx_\n&lt;discord.ext.commands.context.Context object at 0x7f09dc7290c0&gt;\n\ud83d\udc37\ud83d\udc37\ud83d\udc37 |ctx = bot.ctx_\n</code></pre> <pre><code>bot.ctx_\nctx = bot.ctx_\n</code></pre> Note <p>All REPL examples below assumes the examples above a specific example were run</p> <p>All accessible instance variables and functions in the bot:</p> REPLCommands <pre><code>\ud83d\udc37\ud83d\udc37\ud83d\udc37 |dir(bot)\n['_BotBase__cogs', '_BotBase__extensions', '_BotBase__tree', '__aenter__', '__aexit__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_after_invoke', '_application', '_async_setup_hook', '_before_invoke', '_call_before_identify_hook', '_call_module_finalizers', '_check_once', '_checks', '_closed', '_connection', '_enable_debug_events', '_get_state', '_get_websocket', '_handle_ready', '_handlers', '_help_command', '_hooks', '_is_protocol', '_listeners', '_load_from_module_spec', '_music_advance_queue', '_music_data', '_music_old_ytdl_bug_report_message', '_ready', '_remove_module_references', '_resolve_name', '_run_event', '_schedule_event', 'activity', 'add_check', 'add_cog', 'add_command', 'add_listener', 'add_view', 'after_invoke', 'all_commands', 'allowed_mentions', 'application', 'application_flags', 'application_id', 'application_info', 'before_identify_hook', 'before_invoke', 'cached_messages', 'can_run', 'case_insensitive', 'change_presence', 'check', 'check_once', 'clear', 'close', 'cogs', 'command', 'command_prefix', 'commands', 'connect', 'create_dm', 'create_guild', 'ctx_', 'delete_invite', 'description', 'dispatch', 'emojis', 'event', 'extensions', 'extra_events', 'fetch_channel', 'fetch_guild', 'fetch_guilds', 'fetch_invite', 'fetch_premium_sticker_packs', 'fetch_stage_instance', 'fetch_sticker', 'fetch_template', 'fetch_user', 'fetch_webhook', 'fetch_widget', 'get_all_channels', 'get_all_members', 'get_channel', 'get_cog', 'get_command', 'get_context', 'get_emoji', 'get_guild', 'get_partial_messageable', 'get_prefix', 'get_stage_instance', 'get_sticker', 'get_user', 'group', 'guilds', 'help_command', 'http', 'hybrid_command', 'hybrid_group', 'intents', 'invoke', 'is_closed', 'is_owner', 'is_ready', 'is_ws_ratelimited', 'latency', 'listen', 'load_extension', 'login', 'loop', 'on_command_error', 'on_error', 'on_message', 'owner_id', 'owner_ids', 'persistent_views', 'private_channels', 'process_commands', 'recursively_remove_all_commands', 'reload_extension', 'remove_check', 'remove_cog', 'remove_command', 'remove_listener', 'run', 'setup_hook', 'shard_count', 'shard_id', 'start', 'status', 'stickers', 'strip_after_prefix', 'tree', 'unload_extension', 'user', 'users', 'voice_clients', 'wait_for', 'wait_until_ready', 'walk_commands', 'wrap_async', 'ws']\n</code></pre> <pre><code>dir(bot)\n</code></pre> <p>Next, getting a extension/cog and printing out its instance variables and function:</p> REPLCommands <pre><code>\ud83d\udc37\ud83d\udc37\ud83d\udc37 |m = bot.cogs[\"Music\"]\n\ud83d\udc37\ud83d\udc37\ud83d\udc37 |dir(m)\n['_DEFAULT_YTDL_OPTS', '_FFMPEG_FILTER_DICT', '__annotations__', '__class__', '__cog_app_commands__', '__cog_app_commands_group__', '__cog_commands__', '__cog_description__', '__cog_group_auto_locale_strings__', '__cog_group_description__', '__cog_group_extras__', '__cog_group_name__', '__cog_group_nsfw__', '__cog_is_app_commands_group__', '__cog_listeners__', '__cog_name__', '__cog_settings__', '__delattr__', '__dict__', '__dir__', '__discord_app_commands_error_handler__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_batch_add', '_eject', '_get_overridden_method', '_inject', '_play_local', '_play_raw', '_play_stream', 'advance_queue', 'advance_task', 'advancer', 'app_command', 'apply_filter', 'autoshuffle', 'autoshuffler', 'bot', 'bot_check', 'bot_check_once', 'cancel', 'check_connected', 'check_playing', 'clear', 'cog_after_invoke', 'cog_app_command_error', 'cog_before_invoke', 'cog_check', 'cog_command_error', 'cog_load', 'cog_unload', 'current', 'data', 'daycore', 'description', 'ensure_connected', 'fast_forward', 'filter_dict', 'forceskip', 'get_app_commands', 'get_commands', 'get_info', 'get_listeners', 'handle_advance', 'handle_advances', 'has_app_command_error_handler', 'has_error_handler', 'info', 'info_global', 'interaction_check', 'join', 'jump', 'leave', 'listener', 'local', 'local_prepend', 'loop', 'move', 'nightcore', 'normal', 'normalize_index', 'on_advancer_cancel', 'pause', 'pitch', 'playback_history', 'playback_history_clear', 'player_from_url', 'playlist_link', 'pop_info', 'qualified_name', 'queue', 'remove', 'reschedule', 'resume', 'rewind', 'schedule', 'shuffle', 'shuffle_helper', 'skip', 'sleep_in', 'sleep_task', 'speed', 'stream', 'stream_prepend', 'uri_validator', 'volume', 'walk_app_commands', 'walk_commands', 'ytdl_opts']\n</code></pre> <pre><code>m = bot.cogs[\"Music\"]\ndir(m)\n</code></pre> <p>After joining a voice channel, we run a command from the cog:</p> REPLCommands <pre><code>\ud83d\udc37\ud83d\udc37\ud83d\udc37 |await m.stream(ctx, url=\"Anomalie Velours\")\n</code></pre> <pre><code>await m.stream(ctx, url=\"Anomalie Velours\")\n</code></pre> <p>Alternatively, there is another way to get the Context variable:</p> REPLCommands <pre><code>\ud83d\udc37\ud83d\udc37\ud83d\udc37 |server = discord.utils.get(bot.guilds, name=server_name)\n\ud83d\udc37\ud83d\udc37\ud83d\udc37 |chat = discord.utils.get(server.text_channels, name=text_channel_name)\n\ud83d\udc37\ud83d\udc37\ud83d\udc37 |chat_message = await chat.fetch_message(message_id)\n\ud83d\udc37\ud83d\udc37\ud83d\udc37 |ctx = await bot.get_context(chat_message)\n\ud83d\udc37\ud83d\udc37\ud83d\udc37 |msg = await ctx.send(\"Just Good Music\")\n</code></pre> <pre><code># Placeholders to be replaced\nserver_name = ...\ntext_channel_name = ...\nmessage_id = ...\n# Code in the example\nserver = discord.utils.get(bot.guilds, name=server_name)\nchat = discord.utils.get(server.text_channels, name=text_channel_name)\nchat_message = await chat.fetch_message(message_id)\nctx = await bot.get_context(chat_message)\nmsg = await ctx.send(\"Just Good Music\")\n</code></pre> <p>Some basic Python code:</p> REPLCommands <pre><code>\ud83d\udc37\ud83d\udc37\ud83d\udc37 |for i in range(10):\n\ud83d\udc3d\ud83d\udc3d\ud83d\udc3d :        print(i)\n\ud83d\udc3d\ud83d\udc3d\ud83d\udc3d :\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\ud83d\udc37\ud83d\udc37\ud83d\udc37 |\n</code></pre> <pre><code>for i in range(10):\n    print(i)\n</code></pre> <p>Of course, there are much more complex things one can do with the REPL. This section only highlights how to get started with it.</p> <ol> <li> <p>See the REPL section\u00a0\u21a9</p> </li> </ol>"},{"location":"jgmusic/","title":"How JGMusic Works","text":"<p>The information may be useful for future developers looking to dig more into the inner working of the bot and for my own reference. Understanding this section requires knowledge on Python's <code>asyncio</code> library.</p>"},{"location":"jgmusic/#flowchart","title":"Flowchart","text":"<p>To ensure a working music advancing system that works across servers, JGMusic at its core uses a somewhat complicated strategy involving asynchronous queues and status flags. In short, the music advancing process is the bot's preprocess-playback-repeat system.</p> <p>The following flowchart depicts a high-level overview of the music advancing system, including a small section on what happens during <code>load</code>s/<code>unload</code>s.</p> <p>All flowchart nodes are labelled with a number to be elaborated further on in the next sections.</p> <pre><code>graph TD\n    subgraph Normal Function\n        Z([\"(1) Start\"]) --&gt; A[\"(2) On Initialize\"];\n        A --&gt; B[\"(3) &lt;code&gt;self.advancer.start&lt;/code&gt;\"];\n        B --&gt; C[\"(4) Create &lt;code&gt;handle_advances&lt;/code&gt; Task\"];\n        C --&gt; G[\"(5) Wait for &lt;code&gt;advance_queue.get&lt;/code&gt;\"]\n        D[\"(6) Play Song\"] --&gt; E[\"(7) &lt;code&gt;schedule&lt;/code&gt;\"];\n        E --&gt; G\n        G --&gt; H[\"(8) Received &lt;code&gt;(ctx, error)&lt;/code&gt;\"];\n        H --&gt; I[\"(9) Create a &lt;code&gt;handle_advance&lt;/code&gt; Task\"];\n        I --&gt; J[\"(10) Do the Advance Handling\"];\n        J --&gt;|\"&lt;code&gt;after=after&lt;code&gt;\"| E;\n    end\n    subgraph Loading and Unloading\n        c[\"&lt;code&gt;;load music&lt;/code&gt;\"] --&gt; A;\n        B --&gt; a[\"&lt;code&gt;;unload music&lt;/code&gt;\"];\n        a --&gt; b[\"&lt;code&gt;cog_unload&lt;/code&gt;\"];\n        b --&gt; d[\"&lt;code&gt;on_advancer_cancel&lt;/code&gt;\"];\n    end</code></pre>"},{"location":"jgmusic/#normal-function-in-detail","title":"Normal Function in Detail","text":"Note <p>Mentions of <code>music.py</code>, <code>self</code>, or <code>Music</code> will refer to the file <code>jgm/extensions/music</code>, unless stated otherwise.</p>"},{"location":"jgmusic/#1-start","title":"(1) Start","text":"<p>The entry point of JGMusic is <code>jgmusic.py</code>. When <code>hatch run jgm</code> is executed in the terminal, a series of functions are called which eventually leads to <code>jgm/extensions/music.Music.setup</code> which is a special discord.py function that executes when an extension gets loaded with <code>load_extension</code>:</p>"},{"location":"jgmusic/#2-on-initialize","title":"(2) On Initialize","text":"<p>Initialization refers to the instantiation of the <code>Music</code> cog, which happens when <code>Music.setup</code> calls <code>return bot.add_cog(Music(bot))</code>:</p> music.py<pre><code>...\ndef setup(bot):\n    # Suppress noise about console usage from errors\n    bot._music_old_ytdl_bug_report_message = youtube_dl.utils.bug_reports_message\n    youtube_dl.utils.bug_reports_message = lambda: ''\n\n    return bot.add_cog(Music(bot))\n...\n</code></pre> <p>The bot enters this state on startups and loads, which is covered below.</p>"},{"location":"jgmusic/#3-selfadvancerstart","title":"(3) <code>self.advancer.start</code>","text":"<p>There exists the <code>bot</code> object and the <code>Music</code> cog. <code>Music</code> may be unloaded but <code>bot</code> will be available at all times. An <code>asyncio.Queue</code> object is stored in the <code>bot</code> and a copy is stored in <code>Music</code>. An <code>asyncio.Task</code> object <code>self.advance_task</code> is also stored in <code>Music</code> and is by default <code>None</code>. At the very end of the <code>__init__</code> function in <code>Music</code>, <code>self.advancer.start</code> is called, which eventually starts the advancer in the event loop:</p> music.py<pre><code>        ...\n        # Data is persistent between extension reloads\n        if not hasattr(bot, \"_music_data\"):\n            bot._music_data = {}\n        if not hasattr(bot, \"_music_advance_queue\"):\n            bot._music_advance_queue = asyncio.Queue()\n        self.data = bot._music_data\n        self.advance_queue = bot._music_advance_queue\n        # Start the advancer's auto-restart task\n        self.advance_task = None\n        self.advancer.start()\n        ...\n</code></pre> <p><code>Music.advancer</code> is a <code>discord.ext.tasks.Loop</code> object that runs once every 15 seconds to see if an <code>self.advance_task</code> can be created. If there is an issue (<code>self.advance_task</code> will be done), this function auto-restarts the <code>self.advance_task</code> advancer:</p> music.py<pre><code>...\n    # Auto-restart task for the advancer task\n    @tasks.loop(seconds=15)\n    async def advancer(self):\n        if self.advance_task is not None and self.advance_task.done():\n            try:\n                exc = self.advance_task.exception()\n            except asyncio.CancelledError:\n                pass\n            else:\n                print(\"Exception occured in advancer task:\")\n                traceback.print_exception(None, exc, exc.__traceback__)\n            self.advance_task = None\n...\n</code></pre>"},{"location":"jgmusic/#4-create-handle_advances-task","title":"(4) Create <code>handle_advances</code> Task","text":"<p>If <code>self.advance_task</code> is <code>None</code>, it will be set to an <code>asyncio.Task</code> (<code>asyncio.create_task</code> wrapped) <code>Music.handle_advances()</code> coroutine, otherwise known as the music advancer<sup>1</sup>:</p> music.py<pre><code>    ...\n    @tasks.loop(seconds=15)\n    async def advancer(self):\n        ...\n        if self.advance_task is None:\n            self.advance_task = asyncio.create_task(\n                self.handle_advances(),\n                name=\"music_advancer\"\n            )\n    ...\n</code></pre> <p>This gets put in the global <code>asyncio</code> event loop and eventually runs \"soon\".</p>"},{"location":"jgmusic/#5-wait-for-advance_queueget","title":"(5) Wait for <code>advance_queue.get</code>","text":"<p>Inside the <code>Music.handle_advances()</code> coroutine is an infinite loop that first <code>await</code>s an item from <code>self.advance_queue</code> (pauses its execution until it receives the queued item). This infinite loop is called the music advancer task loop:</p> music.py<pre><code>    ...\n    # The advancer task loop\n    async def handle_advances(self):\n        while True:\n            item = await self.advance_queue.get()\n            asyncio.create_task(self.handle_advance(item))\n    ...\n</code></pre>"},{"location":"jgmusic/#6-play-song","title":"(6) Play Song","text":"<p>The way to play a song involves invoking the following commands</p> <ul> <li><code>;stream</code></li> <li><code>;stream_prepend</code></li> <li><code>;local</code></li> <li><code>;local_prepend</code></li> <li><code>;playlist_link</code></li> </ul> <p>or directly as Python code from the REPL.</p> <p>Each of these commands trigger the <code>Music.schedule</code> function.</p>"},{"location":"jgmusic/#7-schedule","title":"(7) Schedule","text":"<p>The <code>Music.schedule</code> function schedules advancement of the queue, provided the bot is not currently \"waiting\" (\"waiting\" is elaborated on in (10)).</p> <p>Within the <code>Music.schedule</code> function, the <code>self.advance_queue.put_nowait</code> function is called, which places a <code>(ctx, error)</code> tuple (see (8)) in <code>self.advance_queue</code>. The <code>ctx</code> object is that of the most recently run bot command that calls the <code>Music.schedule</code> function. The <code>put_nowait</code> function allows an item to be added without pausing execution:</p> music.py<pre><code>    ...\n    # Schedules advancement of the queue\n    def schedule(self, ctx, error=None, *, force=False):\n        info = self.get_info(ctx)\n        if force or not info[\"waiting\"]:\n            self.advance_queue.put_nowait((ctx, error))\n            info[\"waiting\"] = True\n    ...\n</code></pre> <p>As the <code>(ctx, error)</code> item is being awaited in the music advancer task loop, once an item is placed in <code>self.advance_queue</code>, the <code>self.advance_queue.get</code> function will immediately \"capture\" it, allowing the music advancer task loop to be unpaused from execution.</p> <p>The option to force a schedule is done by running the <code>;reschedule</code> command.</p>"},{"location":"jgmusic/#8-received-ctx-error","title":"(8) Received <code>(ctx, error)</code>","text":"<p>Continuing from (6), the coroutine resumes execution after an item is obtained. This item is a tuple.</p> <ul> <li>The first element <code>ctx</code> is an <code>discord.ext.commands.context.Context</code> object</li> <li>The second element <code>error</code> is a player error that happened sometime before handling an advance.</li> </ul> <p>Having a <code>discord.ext.commands.context.Context</code> object useful for fetching the user who ran the command, along with the server they are currently in, along with a lot of other useful information. This allows one <code>asyncio.Queue</code> to be used to manage multiple bot \"instances\" in many servers.</p> <p>Player errors are quite rare under normal usage of the bot. However, the most common one is</p> <pre><code>Player error: OSError(10038, 'An operation was attempted on something that is not a socket', None, 10038, None)\n</code></pre> <p>Technically, the code is completely functional if the second element was removed. It is kept for clarity and ease of debugging.</p>"},{"location":"jgmusic/#9-create-a-handle_advance-task","title":"(9) Create a <code>handle_advance</code> Task","text":"<p>Continuing from (8), the execution of the music advancer task loop (<code>Music.handle_advances()</code> coroutine) resumes. An <code>asyncio.Task</code> is created around the <code>Music.handle_advance()</code> coroutine, which performs all the music advancing logic:</p> music.py<pre><code>    ...\n        while True:\n            item = await self.advance_queue.get()\n            asyncio.create_task(self.handle_advance(item))\n    ...\n</code></pre> <p>This task is created with the <code>(ctx, error)</code> item returned by <code>self.advance_queue.get</code> and will eventually get executed after being placed in the global event loop.</p>"},{"location":"jgmusic/#10-do-the-advance-handling","title":"(10) Do the Advance Handling","text":"<p>Inside the <code>Music.handle_advance()</code> coroutine, the music advancing logic first go through many sanity/error checks, then plays the songs, and automatically sets up to run the <code>Music.schedule()</code> coroutine after playing the song.</p>"},{"location":"jgmusic/#status-flags","title":"Status Flags","text":"<p>There are 2 flags that control the state of the bot, located in the <code>Music.data</code> dictionary. For each server, a specified \"state dictionary\" (we call this <code>info</code>) is obtained through a call to <code>self.get_info(ctx)</code>. These 2 flags are</p> <ul> <li><code>info[\"processing\"]</code>, can be <code>True</code> or <code>False</code></li> <li><code>info[\"waiting\"]</code>, can be <code>True</code> or <code>False</code></li> </ul> <p><code>info[\"waiting\"]</code> is <code>True</code> right after <code>self.advance_queue.put_nowait</code> put an item in <code>self.advance_queue</code> when <code>Music.schedule()</code> is run (then proceeds to handle the advancement). It gets set to <code>False</code> when the music advancing logic runs into exception or the advancing logic finishes:</p> music.py<pre><code>        ...\n        except Exception as e:\n            await channel.send(f\"Internal Error: {e!r}\")\n            info[\"waiting\"] = False\n            await self.skip(ctx)\n            self.schedule(ctx)\n        finally:\n            info[\"waiting\"] = False\n            info[\"processing\"] = False\n        ...\n</code></pre> <p>It is usually not possible to reset or interrupt the music advancing logic, but when something breaks that causes the bot to hang, a <code>;reschedule</code> may be required.</p> <p><code>info[\"processing\"]</code> is mostly <code>False</code>, but can be <code>True</code> if something unexpected happens, usually high latency. Spamming the <code>;reschedule</code> command is likely to trigger this response as well, because one way to go back to the beginning of the music advancing logic with <code>info[\"processing\"] == True</code> is to force a schedule at the perfect time:</p> music.py<pre><code>    ...\n    # The actual music advancing logic\n    async def handle_advance(self, item):\n        ...\n        try:\n            # If we are processing it right now...\n            if info[\"processing\"]:\n                # Wait a bit and reschedule it again\n                await asyncio.sleep(1)\n                self.advance_queue.put_nowait(item)\n                return\n            info[\"processing\"] = True\n    ...\n</code></pre> <p>Basically, \"processing\" spans the entirety of the music advancing logic, but covers slightly less time than \"waiting\" because it has some queue conflict system built into it.</p> <p>Togging of <code>True</code>/<code>False</code> of <code>info[\"processing\"]</code> only happens in the music advancing logic.</p> Note <p>If it ever so happens that <code>info[\"processing\"] = True</code> when the music advancing logic starts, there are is a line of code: <code>await asyncio.sleep(1)</code> in a previous block that force the music advancing logic to pause for a second before continuing. This is done to prevent two <code>(ctx, error)</code> tuples in <code>self.advance_queue</code> from continually kicking each other out, which may happen through quick reschedules, or if the bot is very laggy while the computer is very fast. In practice, this should never happen.</p> <p>Summary, in general:</p> Waiting Processing When <code>True</code> <code>True</code> Almost always going into the music advancing logic, except for a split second at the very beginning <code>True</code> <code>False</code> The opposite of the above, in a split second at the very beginning of the music advancing logic <code>False</code> <code>True</code> Almost never happens <code>False</code> <code>False</code> When bot exits the music advancing logic and starts playing the song <p>The table accounts for 99% of all cases. The remaining 1% originates is deemed to be unexpected behaviour, once again usually fixable with a <code>;reschedule</code> and in the worse case, a restart.</p>"},{"location":"jgmusic/#setup-after-playing","title":"Setup After Playing","text":"<p>If there are more than 0 songs in the actual playback queue, right when the playback of a song has ended, the kwarg <code>after=after</code> in <code>ctx.voice_client.play</code> will run the <code>Music.schedule()</code> coroutine as <code>after</code> (the argument) is set to <code>lambda error, ctx=ctx: self.schedule(ctx, error)</code>, ensuring that there is an item in <code>self.advance_queue</code> to be \"picked up\" when looping back to the beginning of the while loop in <code>Music.handle_advance</code> in (5):</p> music.py<pre><code>            ...\n            if queue:\n                # Get the next song\n                current = queue.popleft()\n                info[\"current\"] = current\n                # Get an audio source and play it\n                after = lambda error, ctx=ctx: self.schedule(ctx, error)\n                async with channel.typing():\n                    ...\n                    ctx.voice_client.pause()\n                    ctx.voice_client.play(source, after=after)\n                await channel.send(f\"Now playing: {title}\")\n            ...\n</code></pre> <p>If there are 0 songs in the actual playback queue, then the <code>Music.handle_advance()</code> will skip the part where <code>after=after</code> is added to the <code>ctx.voice_client.play</code> function (unless if some Internal Error occurs). This results in the code returning to (5) and hanging until (6) happens.</p>"},{"location":"jgmusic/#loading-and-unloading-in-detail","title":"Loading and Unloading in Detail","text":"<p>The bot was designed to be reloadable for ease of development. However loading and unloading when the bot is running may cause unexpected behaviour at times. Loading and unloading is only explained in terms of the scope of the music advancement process.</p> <p>When unloading with <code>;unload music</code>, a special function <code>cog_unload</code></p> music.py<pre><code>    ...\n    # Cancel just the advancer and the auto-restart tasks\n    def cog_unload(self):\n        self.advancer.cancel()\n    ...\n</code></pre> <p>is called. This cancels the advancer/monitoring task (that runs once ever 15 seconds). In turn, this cancels the music advancer and sets <code>self.advance_task</code> to <code>None</code>:</p> music.py<pre><code>    ...\n    @advancer.after_loop\n    async def on_advancer_cancel(self):\n        if self.advancer.is_being_cancelled():\n            if self.advance_task is not None:\n                self.advance_task.cancel()\n                self.advance_task = None\n    ...\n</code></pre> <p>Upon unloading, the important instance variables that \"disappear\" are:</p> <ul> <li><code>Music.data</code></li> <li><code>Music.advance_queue</code></li> <li><code>Music.advance_task</code></li> </ul> <p>However, when <code>;load music</code> is performed, the first 2 variables on the list are set to references stored in the global bot object, while the third one gets set to a new music advancer with the same functionality. In short, loading the music cog brings the bot back to (2).</p> <ol> <li> <p>Space replaced with underscore in the code.\u00a0\u21a9</p> </li> </ol>"},{"location":"playlists/","title":"Playlist Management","text":""},{"location":"playlists/#overview","title":"Overview","text":"<p>This bot also provides very basic playlist functionality<sup>1</sup>. Playlists here are simply stored as plaintext and are given a name.</p> <p>The first two playlist commands are the <code>;check</code> command and the <code>;playlists</code> command</p> Command with Arguments<sup>1</sup> Aliases Cooldown Description <code>;check</code> <code>&lt;name&gt;</code> <code>;h1</code> 1s Output the text for a single playlist <code>;playlists</code> <code>;li</code> 1s Configure playlists <p>The <code>;playlists</code> command may be followed by a subcommand to form <code>;playlists subcommand</code> that acts like a normal command. Some <code>;playlists</code> subcommands:</p> Command with Arguments<sup>1</sup> Aliases Cooldown Description <code>;playlists add</code> <code>&lt;name&gt;</code> <code>&lt;text&gt;</code> <code>;li add</code> 5s Add a playlist <code>;playlists find</code> <code>&lt;name_pattern&gt;</code> <code>;li find</code> 1s Find playlists whose names contain or match the given pattern <code>;playlists owner</code> <code>&lt;name&gt;</code> <code>[new_owner]</code> <code>;li owner</code> 1s Check or set the owner of a playlist <code>;playlists remove</code> <code>&lt;name&gt;</code> <code>;li remove</code> 1s Remove a playlist <code>;playlists rename</code> <code>&lt;name&gt;</code> <code>&lt;new_name&gt;</code> <code>;li rename</code> 1s Rename a playlist <code>;playlists search</code> <code>&lt;name_pattern&gt;</code> <code>[max_amount]</code> <code>;li search</code> 1s Find playlists whose contents contain or match the given pattern <code>;playlists update</code> <code>&lt;name&gt;</code> <code>&lt;text&gt;</code> <code>;li update</code> 1s Update a playlist <p>And some owner-only subcommands</p> Command with Arguments<sup>1</sup> Aliases Cooldown Description <code>;playlist regexfind</code> <code>[max_amount]</code> <code>&lt;regex&gt;</code> <code>;li regexfind</code> Find playlists whose names match the regex pattern <code>;playlist regexremove</code> <code>[max_amount]</code> <code>&lt;regex&gt;</code> <code>;li regexremove</code> Remove playlists whose names match the regex pattern <code>;playlist regexsearch</code> <code>[max_amount]</code> <code>&lt;regex&gt;</code> <code>;li regexsearch</code> Find playlists whose contents match the regex pattern"},{"location":"playlists/#commands","title":"Commands","text":""},{"location":"playlists/#check","title":"<code>check</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Output the text for a single playlist</p> <p>The playlist must exist in the list of playlists</p>"},{"location":"playlists/#arguments","title":"Arguments","text":"<ul> <li><code>name</code> \u2013 The name of the playlist</li> </ul>"},{"location":"playlists/#playlists","title":"<code>playlists</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Configure playlists</p> <p>If not followed by a subcommand, this command simply prints out the number of playlists and their names in alphabetical order. If there exists 0 playlists, then it prints <code>None</code>.</p> <p>See the following section Subcommands for usage of this command in such a way.</p>"},{"location":"playlists/#subcommands","title":"Subcommands","text":""},{"location":"playlists/#add","title":"<code>add</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Add a playlist</p> <p>This command will fail if a playlist with the same name already exists. Playlists can be stored as multiline text blocks with Discord formatting. Playlists are stored as plaintext and cannot be executed directly via a command.</p> <p>Playlists also must only contain alphanumeric characters + underscore, and the maximum number of playlists that can be stored is 500 with each playlist not being able to exceed 35 characters in length.</p>"},{"location":"playlists/#arguments_1","title":"Arguments","text":"<ul> <li><code>name</code> \u2013 The name of the playlist</li> <li><code>text</code> \u2013 The contents of the playlist</li> </ul> Example <p>The command</p> <pre><code>;playlists add myplaylist\n## My Playlist\n\n### Jazz\n- \"Autumn Leaves\" by Miles Davis\n- \"Take Five\" by Dave Brubeck\n- \"So What\" by Miles Davis\n\n### Rock\n- \"Stairway to Heaven\" by Led Zeppelin\n- \"Bohemian Rhapsody\" by Queen\n- \"Hotel California\" by Eagles\n\n### Pop\n- \"Shape of You\" by Ed Sheeran\n- \"Happy\" by Pharrell Williams\n- \"Uptown Funk\" by Mark Ronson ft. Bruno Mars\n</code></pre> <p>Will result in nicely rendered Discord output when <code>;check myplaylist</code> is run:</p> <p>My Playlist</p> <p>Jazz <ul> <li>\"Autumn Leaves\" by Miles Davis</li> <li>\"Take Five\" by Dave Brubeck</li> <li>\"So What\" by Miles Davis</li> </ul></p> <p>Rock <ul> <li>\"Stairway to Heaven\" by Led Zeppelin</li> <li>\"Bohemian Rhapsody\" by Queen</li> <li>\"Hotel California\" by Eagles</li> </ul></p> <p>Pop <ul> <li>\"Shape of You\" by Ed Sheeran</li> <li>\"Happy\" by Pharrell Williams</li> <li>\"Uptown Funk\" by Mark Ronson ft. Bruno Mars</li> </ul></p>"},{"location":"playlists/#find","title":"<code>find</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Find playlists whose names contain or match the given pattern</p> <p>The find command uses basic glob matching and operates on the name of the playlist. In addition to normal alphanumeric characters and underscore special characters supported are ? and %, for matching one and any number of characters respectively.</p> <p>This command returns the number of playlists found that satisfy the given pattern along with their names, listed in alphabetical order. If none are found, it simply returns a list of 0 playlist with output <code>None</code>.</p>"},{"location":"playlists/#arguments_2","title":"Arguments","text":"<ul> <li><code>name_pattern</code> \u2013 The character (glob) patten to match playlist names against</li> </ul> Example <p>Assume the following playlists exist (if these commands are run in series): <pre><code>%playlists add amogus   -\n%playlists add amoguise -\n%playlists add mongus   -\n%playlists add mongue   -\n</code></pre></p> <p>Usage: <pre><code>%playlists find amogus  -&gt; amogus           (exact match)\n%playlists find amo%    -&gt; amogus, amoguise (prefix)\n%playlists find %gus    -&gt; amogus, mongus   (suffix)\n%playlists find mongu?  -&gt; mongus, mongue   (any character)\n%playlists find %m?gu%e -&gt; amoguise         (combine them)\n%playlists find gui     -&gt; amoguise         (\"gui\" in amoguise)\n</code></pre></p>"},{"location":"playlists/#owner","title":"<code>owner</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Check or set the owner of a playlist</p> <p>To check the owner of a playlist, run this command without specifying the <code>new_owner</code> argument.</p> <p>To change a playlist's owner, either the playlist must have no owner, or you are the bot owner, guild owner, or the playlist owner.</p> <p>To clear the owner, pass <code>-</code> as the new owner.</p>"},{"location":"playlists/#arguments_3","title":"Arguments","text":"<ul> <li><code>name</code> \u2013 The name of the playlist</li> <li><code>new_owner</code> \u2013 (Optional) The nickname, handle, ID of a Discord user or a <code>-</code> to indicate no owner</li> </ul> Warning <p>If anyone in the server has the nickname <code>-</code>, then this command cannot be used to set ownership using that nickname. You have to use their Discord handle or Discord ID instead.</p> Example <pre><code>%playlists owner playlist             -&gt;  gets the playlist's current owner\n%playlists owner playlist phibiscool  -&gt;  make phibiscool the playlist owner\n%playlists owner playlist -           -&gt;  removes the playlist's owner\n</code></pre>"},{"location":"playlists/#remove","title":"<code>remove</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Remove a playlist</p> <p>A user may only remove a playlist if they are the bot owner, server owner, the playlist owner, or if the playlist has no owner.</p>"},{"location":"playlists/#arguments_4","title":"Arguments","text":"<ul> <li><code>name</code> \u2013 The name of the playlist</li> </ul>"},{"location":"playlists/#rename","title":"<code>rename</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Rename a playlist</p> <p>A user may only rename a playlist if they are the bot owner, server owner, playlist owner, or if they playlist has no owner.</p> <p>The constraints for the new playlist name follows the same guidelines as the add command.</p> <p>Additionally, a playlist cannot be renamed to itself or an existing playlist name.</p>"},{"location":"playlists/#arguments_5","title":"Arguments","text":"<ul> <li><code>name</code> \u2013 The name of the playlist</li> <li><code>new_name</code> \u2013 The new name of the playlist</li> </ul>"},{"location":"playlists/#search","title":"<code>search</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Find playlists whose contents contain or match the given pattern</p> <p>This command functions exactly the same as <code>;find</code> but it acts on the chant contents rather than the chant names.</p> <p>Searching through chant contents might take a while, so there is an optional parameter that only returns the first <code>max_amount</code> chants (in alphabetical order) in which the substring or glob-ish pattern to search for matches the playlist contents. If not specified, all possible matches will be listed.</p>"},{"location":"playlists/#arguments_6","title":"Arguments","text":"<ul> <li><code>name_pattern_</code> \u2013 Substring or glob-ish pattern match to find in playlist contents</li> <li><code>max_amount</code> \u2013 (Optional) The maximum number of playlists to return</li> </ul>"},{"location":"playlists/#update","title":"<code>update</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Update a playlist</p> <p>This command will silently overwrite any previous playlist with the same name. Just like the <code>;add</code> command, the new playlist contents can be a multiline text block with Discord markdown formatting.</p> <p>Also like the <code>;remove</code> command, it is only possible to update a playlist if the user is the bot owner, server owner, playlist owner or the playlist has no owner.</p> Example <p>First add a playlist: <pre><code>;playlists add to_be_renamed\nthis\ncontains\nold\ncontents\n</code></pre></p> <p>Then update it: <pre><code>;playlists update to_be_renamed\nthis\ncontains\nnew\ncontents\n</code></pre></p>"},{"location":"playlists/#arguments_7","title":"Arguments","text":"<ul> <li><code>name</code> \u2013 Name of the playlist to be updated</li> <li><code>text</code> \u2013 Contents of the new playlist</li> </ul>"},{"location":"playlists/#owner-only-subcommands","title":"Owner Only Subcommands","text":""},{"location":"playlists/#regexfind","title":"<code>regexfind</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Find playlists whose names match the regex pattern</p> <p>Operates in the same manner as the <code>;find</code> command but the match string is a regex, which allows for more flexibility.</p> <p>If specified, the first <code>max_amount</code> playlists (sorted alphabetically) found are listed. Otherwise, all possible matches are listed.</p>"},{"location":"playlists/#arguments_8","title":"Arguments","text":"<ul> <li><code>max_amount</code> \u2013 (Optional) The maximum number of results to display</li> <li><code>regex</code> \u2013 The regex pattern</li> </ul> Warning <p>It is possible to design a playlist name such that a ReDoS attack is possible. This is why this command is reserved for the owner only. The only known way to recover from a ReDos attack is to restart the bot.</p> <p>For example, if there is a playlist named <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaX</code> and the command <code>;playlists regexfind (a|a)+$</code> is run will cause the bot to hang.</p>"},{"location":"playlists/#regexremove","title":"<code>regexremove</code>","text":"<p><sup>  v1.0.0  v2.0.0 </sup></p> <p>Remove playlists whose names match the regex pattern</p> <p>Operates in the same manner as the <code>;remove</code> command but the match string is a regex, which allows for more flexibility and the removal of more than 1 playlist.</p> <p>If specified, the first <code>max_amount</code> playlists (sorted alphabetically) with matching names will be removed. Otherwise, all possible matches are removed.</p> <p>After removal, this command lists out all removed playlists.</p>"},{"location":"playlists/#arguments_9","title":"Arguments","text":"<ul> <li><code>max_amount</code> \u2013 (Optional) The maximum number of playlists to remove</li> <li><code>regex</code> \u2013 The regex pattern</li> </ul> Tip <p>This command is useful for removing all playlists with <code>;playlists remove .*</code></p>"},{"location":"playlists/#regexsearch","title":"<code>regexsearch</code>","text":"<p><sup>  v2.0.0  v2.0.0 </sup></p> <p>Find playlists whose contents match the regex pattern</p> <p>Operates in the same manner as the <code>;search</code> command but the match string is a regex, which allows for more flexibility.</p> <p>If specified, the first <code>max_amount</code> playlists (sorted alphabetically) with matching contents are listed. Otherwise, all possible matches are listed.</p>"},{"location":"playlists/#arguments_10","title":"Arguments","text":"<ul> <li><code>max_amount</code> \u2013 (Optional) The maximum number of results to display</li> <li><code>regex</code> \u2013 The regex pattern</li> </ul> Warning <p>Given that playlist contents are longer than playlist names in general, it is possible for this command to take a long time to process.</p> <p>A ReDoS attack is still possible here. Simply put the ReDoS string in the playlist name. See <code>;regexfind</code> for more details.</p> <ol> <li> <p>Playlists are implemented this way for legacy reasons\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#getting-started","title":"Getting Started","text":"<p>Clone the repo using Git and enter it using the commands below:</p> <pre><code>git clone https://github.com/Togohogo1/jgmusic\ncd jgmusic\n</code></pre> <p>Install Python (minimum is 3.10).</p> <p>Install Hatch globally, recommended via pipx.</p> Note <p>Hatch is in prerelease; pass <code>--pre</code> where necessary.</p>"},{"location":"setup/#config","title":"Config","text":"<p>JoshGone Music takes all configuration using environment variables. Here's a table with the environment variables needed.</p> Name Purpose <code>JGM_TOKEN</code> Discord bot user's token. Should be around 59 characters long and look random. <code>JGM_DB</code> SQLite database location. Set it to <code>jgm.db</code>. <code>JGM_REPL</code> Optional. Can be <code>0</code> (default) or <code>1</code>. If it is <code>1</code>, there will be a REPL after the bot starts. <p>For instructions on getting a Discord bot token and bot setup in general, visit the official documentation.</p> <p>To set an environment variable, run:</p> WindowsMac/Linux <pre><code>set NAME=value\n</code></pre> <pre><code>export NAME=value\n</code></pre>"},{"location":"setup/#more-setup","title":"More Setup","text":"<p>Create or update the database to the newest format by running:</p> <pre><code>hatch run yoyo apply\n</code></pre> <p>For playing music, FFmpeg must exist on the <code>PATH</code> environment variable. Verify by running:</p> <pre><code>ffmpeg -version\n</code></pre> Warning <p>Some of the bot's features (pitch and tempo shifting) require FFmpeg to be compiled with librubberband. You can check if this is the case by seeing if the <code>--enable-librubberband</code> compilation flag is listed under <code>configuration:</code> after running the above command. If this is not the case, then the commands related to pitch and tempo shifting will cause issues.</p> <p>Installing a FFmpeg binary from a common installation source (see Get packages &amp; executable files under the FFmpeg downloads page) will usually include everything required for normal operation of the bot.</p>"},{"location":"setup/#usage","title":"Usage","text":"<p>To run the bot, simply do:</p> <pre><code>hatch run jgm\n</code></pre>"},{"location":"setup/#docs","title":"Docs","text":"<p>To build the documentation from source, run:</p> <pre><code>hatch env run -e docs serve\n</code></pre>"}]}